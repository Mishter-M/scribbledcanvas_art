AWSTemplateFormatVersion: '2010-09-09'
Description: 'ARTFORGE Portfolio - Complete AWS Infrastructure'

Parameters:
  ProjectName:
    Type: String
    Default: 'artforge-portfolio'
    Description: 'Name of the project'
  
  Environment:
    Type: String
    Default              Resource:
                - !GetAtt ArtworkTable.Arn
                - !Sub '${ArtworkTable.Arn}/index/*'
                - !GetAtt HomepageContentTable.Arn
                - !Sub '${HomepageContentTable.Arn}/index/*''prod'
    AllowedValues: [dev, staging, prod]
    Description: 'Environment name'
  
  DomainName:
    Type: String
    Default: ''
    Description: 'Custom domain name (optional)'

Resources:
  # S3 Bucket for website hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-website'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket for artwork uploads
  ArtworkBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-artwork'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: TransitionToIA
            Status: Enabled
            Transition:
              StorageClass: STANDARD_IA
              TransitionInDays: 30
          - Id: TransitionToGlacier
            Status: Enabled
            Transition:
              StorageClass: GLACIER
              TransitionInDays: 365
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # S3 Bucket Policy for website
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'

  # CloudFront Origin Access Identity
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${ProjectName}'

  # CloudFront Distribution (Persistent - survives stack deletions)
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DistributionConfig:
        Aliases: !If [HasDomainName, [!Ref DomainName], []]
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        DefaultRootObject: index.html
        # More specific error responses to avoid interfering with admin routing
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: /403.html
            ErrorCachingMinTTL: 300
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate: !If
          - HasDomainName
          - AcmCertificateArn: !Ref SSLCertificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true

  # SSL Certificate (only if domain is provided)
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: HasDomainName
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZone

  # Route 53 Hosted Zone (only if domain is provided)
  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: HasDomainName
    Properties:
      Name: !Ref DomainName

  # Route 53 DNS Record (only if domain is provided)
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasDomainName
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID

  # DynamoDB Table for artwork metadata
  ArtworkTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-artwork'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: N
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: createdAt
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # DynamoDB Table for homepage content
  HomepageContentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-homepage-content'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: contentType
          AttributeType: S
        - AttributeName: lastModified
          AttributeType: N
      KeySchema:
        - AttributeName: contentType
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: LastModifiedIndex
          KeySchema:
            - AttributeName: lastModified
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ArtworkTable.Arn
                  - !Sub '${ArtworkTable.Arn}/index/*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtworkBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !GetAtt ArtworkBucket.Arn

  # Lambda function for artwork upload
  ArtworkUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-artwork-upload'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ARTWORK_TABLE: !Ref ArtworkTable
          ARTWORK_BUCKET: !Ref ArtworkBucket
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          const s3 = new AWS.S3();
          
          exports.handler = async (event) => {
            try {
              const { id, title, description, medium, dimensions, year, imageData } = JSON.parse(event.body);
              
              // Upload image to S3
              const imageKey = `artwork/${id}/${Date.now()}.jpg`;
              const buffer = Buffer.from(imageData.replace(/^data:image\/\w+;base64,/, ''), 'base64');
              
              await s3.putObject({
                Bucket: process.env.ARTWORK_BUCKET,
                Key: imageKey,
                Body: buffer,
                ContentType: 'image/jpeg',
                ACL: 'private'
              }).promise();
              
              // Save metadata to DynamoDB
              const artwork = {
                id,
                title,
                description,
                medium,
                dimensions,
                year,
                imageUrl: `https://${process.env.ARTWORK_BUCKET}.s3.amazonaws.com/${imageKey}`,
                createdAt: Date.now(),
                updatedAt: Date.now()
              };
              
              await dynamodb.put({
                TableName: process.env.ARTWORK_TABLE,
                Item: artwork
              }).promise();
              
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'POST, OPTIONS'
                },
                body: JSON.stringify({ success: true, artwork })
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({ error: error.message })
              };
            }
          };

  # Lambda function for content management
  ContentManagementFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-content-management'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          HOMEPAGE_CONTENT_TABLE: !Ref HomepageContentTable
          ARTWORK_TABLE: !Ref ArtworkTable
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          
          exports.handler = async (event) => {
            try {
              const { httpMethod, pathParameters, body } = event;
              const path = pathParameters?.proxy || pathParameters?.contentType || 'homepage';
              
              // Enable CORS
              const corsHeaders = {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization'
              };
              
              // Handle preflight requests
              if (httpMethod === 'OPTIONS') {
                return {
                  statusCode: 200,
                  headers: corsHeaders,
                  body: ''
                };
              }
              
              switch (httpMethod) {
                case 'GET':
                  return await handleGet(path, corsHeaders);
                case 'POST':
                case 'PUT':
                  return await handlePut(path, JSON.parse(body || '{}'), corsHeaders);
                case 'DELETE':
                  return await handleDelete(path, corsHeaders);
                default:
                  return {
                    statusCode: 405,
                    headers: corsHeaders,
                    body: JSON.stringify({ error: 'Method not allowed' })
                  };
              }
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({ 
                  success: false, 
                  message: error.message 
                })
              };
            }
          };
          
          async function handleGet(contentType, corsHeaders) {
            if (contentType === 'all') {
              // Get all content types
              const params = {
                TableName: process.env.HOMEPAGE_CONTENT_TABLE
              };
              const result = await dynamodb.scan(params).promise();
              return {
                statusCode: 200,
                headers: corsHeaders,
                body: JSON.stringify({ success: true, data: result.Items })
              };
            } else {
              // Get specific content type
              const params = {
                TableName: process.env.HOMEPAGE_CONTENT_TABLE,
                Key: { contentType }
              };
              const result = await dynamodb.get(params).promise();
              return {
                statusCode: 200,
                headers: corsHeaders,
                body: JSON.stringify({ 
                  success: true, 
                  data: result.Item?.data || null 
                })
              };
            }
          }
          
          async function handlePut(contentType, data, corsHeaders) {
            const params = {
              TableName: process.env.HOMEPAGE_CONTENT_TABLE,
              Key: { contentType },
              UpdateExpression: 'SET #data = :data, lastModified = :lastModified',
              ExpressionAttributeNames: {
                '#data': 'data'
              },
              ExpressionAttributeValues: {
                ':data': data,
                ':lastModified': Date.now()
              },
              ReturnValues: 'ALL_NEW'
            };
            
            const result = await dynamodb.update(params).promise();
            return {
              statusCode: 200,
              headers: corsHeaders,
              body: JSON.stringify({ 
                success: true, 
                data: result.Attributes.data 
              })
            };
          }
          
          async function handleDelete(contentType, corsHeaders) {
            const params = {
              TableName: process.env.HOMEPAGE_CONTENT_TABLE,
              Key: { contentType }
            };
            
            await dynamodb.delete(params).promise();
            return {
              statusCode: 200,
              headers: corsHeaders,
              body: JSON.stringify({ 
                success: true, 
                message: 'Content deleted successfully' 
              })
            };
          }

  # API Gateway
  ArtworkAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-api'
      Description: 'API for artwork management'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  ArtworkResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ArtworkAPI
      ParentId: !GetAtt ArtworkAPI.RootResourceId
      PathPart: artwork

  # API Gateway Method
  ArtworkUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ArtworkAPI
      ResourceId: !Ref ArtworkResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArtworkUploadFunction.Arn}/invocations'

  # API Gateway CORS Options Method
  ArtworkOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ArtworkAPI
      ResourceId: !Ref ArtworkResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Content API Resource
  ContentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ArtworkAPI
      ParentId: !GetAtt ArtworkAPI.RootResourceId
      PathPart: 'content'

  # Content Proxy Resource for dynamic paths
  ContentProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ArtworkAPI
      ParentId: !Ref ContentResource
      PathPart: '{proxy+}'

  # Content GET Method
  ContentGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ArtworkAPI
      ResourceId: !Ref ContentProxyResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContentManagementFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Content PUT Method
  ContentPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ArtworkAPI
      ResourceId: !Ref ContentProxyResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContentManagementFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Content OPTIONS Method for CORS
  ContentOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ArtworkAPI
      ResourceId: !Ref ContentProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{"statusCode": 200}'
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permission for API Gateway - Artwork
  ArtworkUploadLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ArtworkUploadFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ArtworkAPI}/*/*'

  # Lambda Permission for API Gateway - Content
  ContentManagementLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ContentManagementFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ArtworkAPI}/*/*'

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ArtworkUploadMethod
      - ArtworkOptionsMethod
    Properties:
      RestApiId: !Ref ArtworkAPI
      StageName: !Ref Environment

  # CloudWatch Log Group
  WebsiteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${ProjectName}-${Environment}'
      RetentionInDays: 14

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-artwork-upload'
      RetentionInDays: 14

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]

Outputs:
  WebsiteBucketName:
    Description: 'Name of the S3 bucket for website hosting'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucket'

  ArtworkBucketName:
    Description: 'Name of the S3 bucket for artwork storage'
    Value: !Ref ArtworkBucket
    Export:
      Name: !Sub '${AWS::StackName}-ArtworkBucket'

  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontDomainName:
    Description: 'CloudFront Distribution Domain Name'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomainName'

  WebsiteURL:
    Description: 'Website URL'
    Value: !If
      - HasDomainName
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  APIEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ArtworkAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'

  DynamoDBTableName:
    Description: 'DynamoDB table name for artwork metadata'
    Value: !Ref ArtworkTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'

  HomepageContentTableName:
    Description: 'DynamoDB table name for homepage content'
    Value: !Ref HomepageContentTable
    Export:
      Name: !Sub '${AWS::StackName}-HomepageContentTable'

  ContentManagementAPI:
    Description: 'Content Management API endpoint'
    Value: !Sub 'https://${ArtworkAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/content'
    Export:
      Name: !Sub '${AWS::StackName}-ContentAPI'
